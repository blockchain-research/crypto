package ccs08

import (
	"math/big"

	"github.com/blockchain-research/crypto/bn256"
)

/*
ParamsULProver contains elements generated by the SetupUL, which are parameters for the prover to generate proofs.
This must be computed in a trusted setup.
*/
type ParamsULProver struct {
	signatures map[string]*bn256.G2
	H          *bn256.G2
	// TODO:must protect the private key
	kp keypair
	// u determines the amount of signatures we need in the public params.
	// Each signature can be compressed to just 1 field element of 256 bits.
	// Then the parameters have minimum size equal to 256*u bits.
	// l determines how many pairings we need to compute, then in order to improve
	// verifier`s performance we want to minize it.
	// Namely, we have 2*l pairings for the prover and 3*l for the verifier.
	u, l int64
}

/*
ParamsULVerifier contains elements generated by the SetupUL, which are paremeters for the verifier to verify proofs.
This must be computed in a trusted setup.
*/
type ParamsULVerifier struct {
	H    *bn256.G2
	pubk *bn256.G1
	u, l int64
}

/*
ProofUL contains the proof generated by prover which will be used for verification by verifiers
*/
type ProofUL struct {
	V        []*bn256.G2
	D, C     *bn256.G2
	a        []*bn256.GT
	zsig, zv []*big.Int
	c, zr    *big.Int
}

/*
ProofUL contains the proof generated by prover which will be used for verification by verifiers
*/
type Proof struct {
	proof1 *ProofUL
	proof2 *ProofUL
}

/*
Prover
*/
type Prover struct {
	params *ParamsULProver
	a      int64
	b      int64
}

/*
Verifier
*/
type Verifier struct {
	params *ParamsULVerifier
	a      int64
	b      int64
}
